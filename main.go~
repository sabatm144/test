package main

import (
	"fmt"
	"log"
	"net/http"
	"strings"
	"test/routes"
	"time"

	"os"

	"github.com/rs/cors"
	"github.com/tealeg/xlsx"
)

type headerMap map[string]int

func main() {

	port := 8000
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	c := cors.New(cors.Options{
		AllowedOrigins: []string{"*"},
		AllowedMethods: []string{"GET", "POST", "DELETE", "PUT", "OPTIONS"},
		AllowedHeaders: []string{"Origin", "X-Requested-With", "Content-Type"},
	})

	server := &http.Server{
		Handler: c.Handler(routes.HTTPRouteConfig()),
		Addr:    fmt.Sprintf(":%d", port),
		//Good practice: enforces timeout for the server
		WriteTimeout:   90 * time.Second,
		ReadTimeout:    90 * time.Second,
		MaxHeaderBytes: 1 << 20,
	}

	dir, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Directory :", dir)

	xLSXFile, err := xlsx.OpenFile("controllers/file.xlsx")
	if err != nil {
		log.Println(err.Error())
	}

	data := headerMap{}
	headers := []string{"key", "value"}
	xlsx_pairs := map[string]string{}
	data["key"] = 0
	data["value"] = 1

	for _, sheet := range xLSXFile.Sheets {
		for _, row := range sheet.Rows[1:] {

			if colIdx, ok := data[headers[0]]; ok && len(row.Cells) > colIdx {
				key := strings.TrimSpace(row.Cells[colIdx].Value)

				if colIdx, ok := data[headers[1]]; ok && len(row.Cells) > colIdx {
					value := strings.TrimSpace(row.Cells[colIdx].Value)
					if key != "" {
						xlsx_pairs[key] = value
					}
				}
			}
		}
	}

	log.Println(xlsx_pairs)
	log.Printf("Server is listening on: %d", port)
	if err := server.ListenAndServe(); err != http.ErrServerClosed {
		log.Fatalf("Unable to listen: %v\n", err)
	}

}

func main1() {
	routes.GinRouter()
}
