package controller

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"strings"

	"time"

	"github.com/gin-gonic/gin"
	strip "github.com/grokify/html-strip-tags-go"
)

func GetCountFromWebPage(w http.ResponseWriter, r *http.Request) {

		dir, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Directory :", dir)

	xLSXFile, err := xlsx.OpenFile("controllers/file.xlsx")
	if err != nil {
		log.Println(err.Error())
	}

	data := headerMap{}
	headers := []string{"key", "value"}
	xlsx_pairs := map[string]string{}
	data["key"] = 0
	data["value"] = 1

	for _, sheet := range xLSXFile.Sheets {
		for _, row := range sheet.Rows[1:] {

			if colIdx, ok := data[headers[0]]; ok && len(row.Cells) > colIdx {
				key := strings.TrimSpace(row.Cells[colIdx].Value)

				if colIdx, ok := data[headers[1]]; ok && len(row.Cells) > colIdx {
					value := strings.TrimSpace(row.Cells[colIdx].Value)
					if key != "" {
						xlsx_pairs[key] = value
					}
				}
			}
		}
	}

	log.Println(xlsx_pairs)

	renderJSON(w, http.StatusOK, names)
}

func GetCountGinFromWebPage(c *gin.Context) {

	req, err := http.NewRequest("GET", "https://in.reuters.com/", nil)
	if err != nil {
		log.Printf("ERR: %v", err)
		return
	}

	req.Header.Add("Content-Type", "application/json")

	client := http.Client{
		Timeout: 60 * time.Second,
	}

	resp, err := client.Do(req)
	if resp != nil {
		defer resp.Body.Close()
	}

	if err != nil {
		log.Printf("ERR: %v", err)
		return
	}

	if resp.StatusCode != http.StatusOK {
		log.Printf("STATUS [%v]: %v", resp.StatusCode, resp.Status)
		return
	}

	body, _ := ioutil.ReadAll(resp.Body)

	// log.Println("BODY DATA FROM URL", string(body))

	t := strip.StripTags(string(body))
	// fmt.Printf("Fields are: %q", strings.Fields(t))

	duplicate_frequency := make(map[string]int)

	for _, item := range strings.Fields(t) {
		// check if the item/element exist in the duplicate_frequency map

		_, exist := duplicate_frequency[item]

		if exist {
			duplicate_frequency[item] += 1 // increase counter by 1 if already in the map
		} else {
			duplicate_frequency[item] = 1 // else start counting from 1
		}
	}

	names := []string{}

	for duplicate, value := range duplicate_frequency {
		names = append(names, fmt.Sprintf("%s = %d", duplicate, value))
	}

	c.JSON(200, names)
}
